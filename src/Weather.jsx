import { WiThermometer, WiHumidity, WiCloud, WiStrongWind } from "react-icons/wi";
import { GiFarmer } from "react-icons/gi";
import React, { useState } from "react";
import "./Weather.css"; 

const VITE_WEATHER_KEY = "78ed0eeee94a2de54804f3e574f7d36c"; // тЬЕ Replace with your API key

export default function Weather() {
  const [city, setCity] = useState("");
  const [weatherData, setWeatherData] = useState(null);
  const [forecastInfo, setForecastInfo] = useState(null);
  const [dailyForecast, setDailyForecast] = useState([]);
  const [loading, setLoading] = useState(false);
  const [advice, setAdvice] = useState("");
  const [locationText, setLocationText] = useState("");
  const [language, setLanguage] = useState("en"); // ЁЯМР Language state

  // ---------------- Fetch Weather by City -----------------
  async function getWeatherByCity() {
    if (!city) return;
    setLoading(true);
    try {
      const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${VITE_WEATHER_KEY}&units=metric&lang=${language}`;
      const res = await fetch(url);
      if (!res.ok) throw new Error("City not found");
      const json = await res.json();
      setWeatherData(json);
      getForecastByCoords(json.coord.lat, json.coord.lon);
      generateAdvice(json);
    } catch (err) {
      console.error("Weather fetch error:", err);
      setWeatherData(null);
      setForecastInfo(null);
      setDailyForecast([]);
      setAdvice("City not found or invalid input.");
    } finally {
      setLoading(false);
    }
  }

  // ---------------- Fetch Weather by GPS -----------------
  async function getWeatherByLocation() {
    if (!navigator.geolocation) {
      alert("Geolocation not supported in your browser.");
      return;
    }

    setLoading(true);
    navigator.geolocation.getCurrentPosition(
      async (pos) => {
        const lat = pos.coords.latitude;
        const lon = pos.coords.longitude;
        setLocationText(`ЁЯУН Lat: ${lat.toFixed(2)}, Lon: ${lon.toFixed(2)}`);
        try {
          const url = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${VITE_WEATHER_KEY}&units=metric&lang=${language}`;
          const res = await fetch(url);
          const json = await res.json();
          setWeatherData(json);
          getForecastByCoords(lat, lon);
          generateAdvice(json);
        } catch (err) {
          console.error("GPS weather error:", err);
        } finally {
          setLoading(false);
        }
      },
      (err) => {
        alert("Unable to fetch location. Please allow location access.");
        setLoading(false);
      }
    );
  }

  // ---------------- Fetch Forecast -----------------
  async function getForecastByCoords(lat, lon) {
    try {
      const url = `https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&appid=${VITE_WEATHER_KEY}&units=metric&lang=${language}`;
      const res = await fetch(url);
      const json = await res.json();

      const info = analyzeForecastList(json.list);
      setForecastInfo(info);

      const grouped = {};
      json.list.forEach((entry) => {
        const date = new Date(entry.dt_txt).toLocaleDateString("en-IN", {
          weekday: "short",
          day: "numeric",
        });
        if (!grouped[date]) grouped[date] = [];
        grouped[date].push(entry);
      });

      const daily = Object.entries(grouped)
        .slice(0, 5)
        .map(([day, values]) => {
          const temps = values.map((v) => v.main.temp);
          const avgTemp = temps.reduce((a, b) => a + b, 0) / temps.length;
          const condition = values[0].weather[0].description;
          return { day, temp: avgTemp.toFixed(1), condition };
        });

      setDailyForecast(daily);
    } catch (err) {
      console.error("Forecast fetch error:", err);
    }
  }

  // ---------------- Analyze Rainfall -----------------
  function analyzeForecastList(list) {
    const next24 = list.slice(0, 8);
    const total24 = next24.reduce(
      (sum, e) => sum + (e.rain ? e.rain["3h"] || 0 : 0),
      0
    );

    return {
      rain24: total24 > 0,
      total24: total24.toFixed(1),
    };
  }

  // ---------------- Farmer Advice -----------------
  function generateAdvice(data) {
    if (!data) return;
    const temp = data.main.temp;
    const condition = data.weather[0].main.toLowerCase();

    if (condition.includes("rain")) {
      setAdvice("тШФ Heavy rainfall expected тАФ cover stored grains & delay irrigation.");
    } else if (condition.includes("cloud")) {
      setAdvice("ЁЯМея╕П Cloudy day тАФ suitable for fertilizer application.");
    } else if (condition.includes("clear")) {
      if (temp > 32) {
        setAdvice("тШАя╕П Hot & dry тАФ good day for harvesting wheat, maize, or cotton.");
      } else {
        setAdvice("ЁЯМ╛ Clear skies тАФ suitable for sowing or harvesting pulses & cereals.");
      }
    } else if (condition.includes("storm")) {
      setAdvice("тЪая╕П Thunderstorm warning тАФ secure loose items & avoid spraying pesticides.");
    } else {
      setAdvice("ЁЯк┤ Normal weather тАФ continue regular farm activities.");
    }
  }

  // ---------------- Language Translations -----------------
  const translations = {
    en: {
      title: "ЁЯМ╛ Smart Weather Assistant",
      search: "Search",
      useLocation: "ЁЯУН Use My Location",
      rainfallAlerts: "тШФ Rainfall Alerts",
      next24: "Next 24 hrs:",
      forecast: "ЁЯУЕ 5-Day Forecast",
      advice: "ЁЯМ┐ Farmer Advice",
      loading: "Loading...",
      noRain: "тШАя╕П No rain expected",
      rainExpected: "ЁЯМзя╕П Expected",
    },
    hi: {
      title: "ЁЯМ╛ рд╕реНрдорд╛рд░реНрдЯ рдореМрд╕рдо рд╕рд╣рд╛рдпрдХ",
      search: "рдЦреЛрдЬреЗрдВ",
      useLocation: "ЁЯУН рдореЗрд░рд╛ рд╕реНрдерд╛рди рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ",
      rainfallAlerts: "тШФ рд╡рд░реНрд╖рд╛ рдЕрд▓рд░реНрдЯ",
      next24: "рдЕрдЧрд▓реЗ 24 рдШрдВрдЯреЗ:",
      forecast: "ЁЯУЕ 5-рджрд┐рд╡рд╕реАрдп рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди",
      advice: "ЁЯМ┐ рдХрд┐рд╕рд╛рди рд╕рд▓рд╛рд╣",
      loading: "рд▓реЛрдб рд╣реЛ рд░рд╣рд╛ рд╣реИ...",
      noRain: "тШАя╕П рдмрд╛рд░рд┐рд╢ рдХреА рд╕рдВрднрд╛рд╡рдирд╛ рдирд╣реАрдВ",
      rainExpected: "ЁЯМзя╕П рдмрд╛рд░рд┐рд╢ рдХреА рд╕рдВрднрд╛рд╡рдирд╛",
    },
    mr: {
      title: "ЁЯМ╛ рд╕реНрдорд╛рд░реНрдЯ рд╣рд╡рд╛рдорд╛рди рд╕рд╣рд╛рдпреНрдпрдХ",
      search: "рд╢реЛрдзрд╛",
      useLocation: "ЁЯУН рдорд╛рдЭреЗ рд╕реНрдерд╛рди рд╡рд╛рдкрд░рд╛",
      rainfallAlerts: "тШФ рдкрд╛рд╡рд╕рд╛рдЪрд╛ рдЗрд╢рд╛рд░рд╛",
      next24: "рдкреБрдвреАрд▓ 24 рддрд╛рд╕:",
      forecast: "ЁЯУЕ 5 рджрд┐рд╡рд╕рд╛рдВрдЪрд╛ рдЕрдВрджрд╛рдЬ",
      advice: "ЁЯМ┐ рд╢реЗрддрдХрд░реА рд╕рд▓реНрд▓рд╛",
      loading: "рд▓реЛрдб рд╣реЛрдд рдЖрд╣реЗ...",
      noRain: "тШАя╕П рдкрд╛рдКрд╕ рдЕрдкреЗрдХреНрд╖рд┐рдд рдирд╛рд╣реА",
      rainExpected: "ЁЯМзя╕П рдкрд╛рдКрд╕ рдЕрдкреЗрдХреНрд╖рд┐рдд",
    },
  };

  const t = translations[language];

  return (
    <div className="weather-container">
      <h2 className="title">{t.title}</h2>

      <div className="lang-select">
        ЁЯМР <span>Select Language:</span>
        <select value={language} onChange={(e) => setLanguage(e.target.value)}>
          <option value="en">English</option>
          <option value="hi">Hindi</option>
          <option value="mr">Marathi</option>
        </select>
      </div>

      <div className="search-box">
        <input
          type="text"
          placeholder="Enter city..."
          value={city}
          onChange={(e) => setCity(e.target.value)}
        />
        <button onClick={getWeatherByCity} disabled={loading}>
          {loading ? t.loading : t.search}
        </button>
        <button className="gps-btn" onClick={getWeatherByLocation}>
          {t.useLocation}
        </button>
      </div>

      {locationText && <p className="location-text">{locationText}</p>}

      {weatherData && (
        <div className="weather-box">
          <h3>{weatherData.name}</h3>
          <p>
            <WiThermometer size={24} /> {weatherData.main.temp}┬░C
          </p>
          <p>
            <WiCloud size={24} /> {weatherData.weather[0].description}
          </p>
          <p>
            <WiStrongWind size={24} /> {weatherData.wind.speed} m/s
          </p>
          <p>
            <WiHumidity size={24} /> {weatherData.main.humidity}%
          </p>
        </div>
      )}

      {forecastInfo && (
        <div className="forecast-alert">
          <h4><strong>{t.rainfallAlerts}</strong></h4>
          <p>
            {t.next24}{" "}
            {forecastInfo.rain24
              ? `${t.rainExpected} (${forecastInfo.total24} mm)`
              : t.noRain}
          </p>
        </div>
      )}

      {dailyForecast.length > 0 && (
        <div className="forecast-section">
          <h4>{t.forecast}</h4>
          <div className="forecast-grid">
            {dailyForecast.map((day, i) => (
              <div key={i} className="forecast-card">
                <p>
                  <strong>{day.day}</strong>
                </p>
                <p>{day.temp}┬░C</p>
                <p>{day.condition}</p>
              </div>
            ))}
          </div>
        </div>
      )}

      {advice && (
        <div className="farmer-advice">
          <h4>{t.advice}</h4>
          <p>
            <GiFarmer size={22} /> {advice}
          </p>
        </div>
      )}
    </div>
  );
}
